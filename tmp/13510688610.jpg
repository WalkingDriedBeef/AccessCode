IS));
		//c.add(uP);
		JPanel p = new JPanel();
		p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
		p.add(uP);
		p.add(histP);
		c.add(p);
		c.add(uplodP);
		setSize(WIDTH, HEIGHT);
		setResizable(false);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		setVisible(true);		
	}
	
	public void drawHistogram() {
		try {
			BufferedImage bfImg = ImageIO.read(new File(imgSrc));
			int w = bfImg.getWidth();
			int h = bfImg.getHeight();
			int pix[] = new int[w*h];
			int hist[] = new int[256];
			/*for(int i=0; i<hist.length; i++) {
				hist[i] = 0;
			}*/
			int imgType = bfImg.getType();
			int temp;
			bfImg.getRGB(0, 0, w, h, pix, 0, w);
			ColorModel cm = ColorModel.getRGBdefault();
			for(int i=0; i<pix.length; i++) {
				/*for(int j=0; j<hist.length; j++) {
					if(j ==  cm.getRed(pix[i])) {
						hist[j] ++;
					}
				}*/				
				temp = cm.getRed(pix[i]);
				hist[temp] ++;
			}
			//System.out.println(hist.length);
			
			int max = 0;
			for(int i=0; i<hist.length; i++) {
				if(hist[i] > max) {
					max = hist[i];
		